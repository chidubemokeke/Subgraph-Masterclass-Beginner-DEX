# Represents a newly created liquidity pool with initial details
type Factory @entity(immutable: true) {
  id: Bytes! # Unique identifier for the PoolCreated event, often the transaction hash or a combination of event parameters
  token0: Bytes! # Address of the first token in the pool
  token1: Bytes! # Address of the second token in the pool
  fee: BigInt! # Fee tier for the liquidity pool (e.g., 500 for 0.05%)
  tickSpacing: BigInt! # Spacing between ticks in the pool, influences price granularity
  pool: Bytes! # Address of the newly created pool contract
  poolCount: BigInt! # Count of pools created
  blockNumber: BigInt! # Block number where the PoolCreated event was emitted
  blockTimestamp: BigInt! # Timestamp of the block where the event was emitted
  transactionHash: Bytes! # Transaction hash where the PoolCreated event was logged
}

type Pool @entity {
  id: ID! # Unique identifier for the pool (address)
  token0: Bytes! # Address of the first token in the pool
  token1: Bytes! # Address of the second token in the pool
  fee: BigInt! # Fee tier for the pool
  tickSpacing: BigInt! # Tick spacing for the pool
  totalLiquidity: BigInt! # Total liquidity in the pool
  totalLiquidityIn: BigInt! # Total liquidity added to the pool
  totalLiquidityOut: BigInt! # Total liquidity removed from the pool
  averageLiquidityIn: BigDecimal! # Average liquidity added to the pool
  averageLiquidityOut: BigDecimal! # Average liquidity removed from the pool
  mintCount: BigInt!
  burnCount: BigInt!
  swapCount: BigInt!
  token0MintCount: BigInt!
  token0BurnCount: BigInt!
  token0SwapCount: BigInt!
  token1MintCount: BigInt!
  token1BurnCount: BigInt!
  token1SwapCount: BigInt!
  token0TransferCount: BigInt!
  token1TransferCount: BigInt!
  activityCount: BigInt! # Total number of events = Swaps, Mints, Burns
  blockNumber: BigInt!
  timeStamp: BigInt!
  transactionHash: Bytes!
  swaps: [Swap!]! @derivedFrom(field: "pool") # List of swaps involving this pool
  mints: [Mint!]! @derivedFrom(field: "pool") # List of mints involving this pool
  burns: [Burn!]! @derivedFrom(field: "pool") # List of burns involving this pool
}

type Token @entity {
  id: ID! # token address
  symbol: String! # token symbol
  name: String! # token name
  decimals: BigDecimal! # token decimals
  totalSupply: BigInt! # token total supply
  transferCount: BigInt! # Total number of times token has been transferred
}

# Entity to track swap events
type Swap @entity {
  id: ID! # Unique identifier for the swap (event hash + log index)
  pool: Pool! # Reference to the pool where the swap occurred
  sender: Bytes! # Address of the sender
  recipient: Bytes! # Address of the recipient
  amount0In: BigInt # Amount of token0 sent to the pool
  amount1In: BigInt # Amount of token1 sent to the pool
  amount0Out: BigInt # Amount of token0 sent from the pool
  amount1Out: BigInt # Amount of token1 sent from the pool
  timestamp: BigInt # Timestamp of the swap event
}

# Entity to track mint events
type Mint @entity {
  id: ID! # Unique identifier for the mint event (event hash + log index)
  pool: Pool! # Reference to the pool where the mint occurred
  sender: Bytes! # Address of the sender
  recipient: Bytes! # Address of the recipient
  tickLower: BigInt! # Lower tick of the minted position
  tickUpper: BigInt! # Upper tick of the minted position
  amount: BigInt # Amount of liquidity minted
  amount0: BigInt # Amount of token0 deposited
  amount1: BigInt # Amount of token1 deposited
  timestamp: BigInt # Timestamp of the mint event
}

# Entity to track burn events
type Burn @entity {
  id: ID! # Unique identifier for the burn event (event hash + log index)
  pool: Pool! # Reference to the pool where the burn occurred
  sender: Bytes! # Address of the sender
  tickLower: BigInt! # Lower tick of the burned position
  tickUpper: BigInt! # Upper tick of the burned position
  amount: BigInt # Amount of liquidity burned
  amount0: BigInt # Amount of token0 withdrawn
  amount1: BigInt # Amount of token1 withdrawn
  timestamp: BigInt # Timestamp of the burn event
}
